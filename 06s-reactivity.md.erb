---
title: Reactivity
slug: reactivity
date: 0006/01/02
number: 6.5
sidebar: true
contents: Meteor의 반응성 코드 의존 시스템(reactive code dependency system)에 대해 배우자.|동기와 어떻게 코드를 선언적으로 만드는지 이해한다.|reactive 데이터를 사용하는 세련된 코드를 작성하는 법을 배운다.
paragraphs: 20
---

////

////

////

////

~~~js
Posts.find().observe({
  added: function(post) {
    // when 'added' callback fires, add HTML element
    $('ul').append('<li id="' + post._id + '">' + post.title + '</li>');
  },
  changed: function(post) {
    // when 'changed' callback fires, modify HTML element's text
    $('ul li#' + post._id).text(post.title);
  },
  removed: function(post) {
    // when 'removed' callback fires, remove HTML element
    $('ul li#' + post._id).remove();
  }
});
~~~

////

<% note do %>

### 언제 `observe()` *사용해야만*하나 ?

////

////

<% end %>

### 선언적 접근

////

////

////

~~~html
<template name="postsList">
  <ul>
    {{#each posts}}
      <li>{{title}}</li>
    {{/each}}
  </ul>
</template>
~~~

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~

////

### Meteor에서 의존성 추적하기: Computations(계산)

////

////

////

////

////

### Computation 만들기

////

~~~js
Deps.autorun(function() {
  console.log('There are ' + Posts.find().count() + ' posts');
});
~~~

////

~~~js
> Posts.insert({title: 'New Post'});
There are 4 posts.
~~~

////
