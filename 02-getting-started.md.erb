---
title: 시작하기
slug: getting-started
date: 0002/01/01
number: 2
contents: Meteor와 Meteorite를 설치한다.|Meteor 패키지의 다섯가지 형식에 대하여 알아본다.|Meteor 앱의 파일 구조를 설정한다.
paragraphs: 49
---

첫 인상은 중요하다. 미티어의 설치과정은 상대적으로 어렵지 않을 것이다. 대부분의 경우, 독자는 5분이내에 설치하고 실행할 것이다.

우선 첫째로, 터미널 윈도우를 열고 다음과 같이 입력하여 미티어를 설치한다:

~~~bash
$ curl https://install.meteor.com | sh
~~~

이것은 `meteor` 실행파일을 독자의 시스템에 설치하여 미티어를 사용할 수 있게 한다.

<% note do %>

### 미티어를 *설치하지 않기*

미티어를 독자의 컴퓨터에 설치할 수 없다면(혹은 설치를 원하지 않으면), [Nitrous.io](http://nitrous.io)를 방문하여 살펴보기를 권한다.

Nitrous.io는 앱을 실행하거나 브라우저에서 바로 코드를 편집하게 하는 서비스이다. 우리는 독자가 설치하는데 도움이 되는 [간단한 안내서](https://www.discovermeteor.com/2013/10/04/meteor-nitrous/)를 작성하여 제공한다.

이 안내서의 “Installing Meteor & Meteorite” 섹션까지 읽은 다음, 이 장의 “간단한 앱 만들기” 섹션에서 시작하여 이 책을 다시 따라가면 된다.

<% end %>
 
### Meteorite

미티어가 아직 서드파티 패키지를 제대로 지원하지 않기 때문에, Tom Coleman(이 책의 저자의 한 사람)과 그 커뮤니티의 일부 구성원들이 미티어의 겉포장지에 해당하는 [Meteorite](http://oortcloud.github.com/meteorite/)를 만들었다. Meteorite는 미티어를 설치하고 이를 서드파티 패키지와 연동하는 것을 지원한다.

Microscope의 기능의 일부는 서드파티 패키지에 의존하므로, Meteorite를 설치하자.

### Meteorite 설치

먼저 시스템에 node와 git이 설치되어 있어야 한다. 시스템의 운영체제에 적합한 버전을 아래 링크를 참고하여 설치한다:
 
- [Node 다운로드 사이트](http://nodejs.org/download/)
- [Git 다운로드 사이트](http://git-scm.com/downloads)

이제 Meteorite를 설치하자. Meteorite는 [npm](https://npmjs.org/) 실행파일(Node Packaged Module, Node의 표준 모듈 형식)이므로, 아래와 같이 설치한다:

~~~bash
$ npm install -g meteorite
~~~

<% note do %>

### 접근권한 오류?

일부 시스템의 경우 Meteorite를 설치하는 데 루트 권한을 요구하는 경우가 있다. 이 때, 해결 방법은 sudo -H를 사용하는 것이다:

~~~bash
$ sudo -H npm install -g meteorite
~~~

이 이슈와 관련하여 더 자세한 내용은 [Meteorite 문서](https://github.com/oortcloud/meteorite/blob/master/README.md#permission-woes)를 참고하라.

<% end %>

이것으로 되었다! 이제부터 Meteorite가 모든 것을 처리할 것이다.

주: Meteorite에 대한 윈도우 지원은 아직 없다. 그렇지만, 대신 [our windows tutorial](http://themeteorbook.com/2013/03/20/using-meteor-and-atmopshere-on-windows/)를 한 번 살펴보기 바란다.


<% note do %>

### `mrt` 대 `meteor`
  
Meteorite는 `mrt` 실행파일을 설치한다. 우리는 이것을 앱에 패키지들을 설치할 때 사용한다. 서버를 실행할 때에는 `meteor` 실행파일을 사용한다.
  
<% end %>

### 간단한 앱 만들기

이제 Meteorite를 설치하였으니, 앱을 만들어보자. Meteorite의 명령어 도구인 `mrt`를 사용한다:

~~~bash
$ mrt create microscope
~~~

이 명령어는 미티어를 다운로드하고, 기본적인 설정을 수행한 다음, 미티어 프로젝트를 사용할 수 있는 상태로 만든다. 작업이 완료되면, `microscope/` 디렉토리에서 아래 파일들을 볼 수 있을 것이다:

~~~bash
microscope.css  
microscope.html 
microscope.js   
smart.json 
~~~

미티어가 만든 이 앱은 몇 가지 단순한 패턴을 보여주는 간단한 보일러플레이트 애플리케이션이다.

이 앱이 별 것 아니지만, 실행할 수는 있다. 이 앱을 실행하려면 터미널에서 다음을 입력하면 된다:

~~~bash
$ cd microscope
$ meteor
~~~

이제 브라우저에서 `http://localhost:3000/` (또는 `http://0.0.0.0:3000/`)을 입력하면 다음과 같은 화면을 볼 수 있다:

<%= screenshot "2-1", "Meteor's Hello World." %>

<%= commit "2-1", "Created basic microscope project." %>

축하한다! 당신은 첫 미티어 앱을 실행하였다. 그리고, 이 앱을 중단하려면, 실행 중인 터미널에서 `ctrl+c`를 누르면 된다.

### 패키지 추가

이번에는 Meteorite를 이용하여 프로젝트에 [Bootstrap](http://getbootstrap.com/)을 포함하는 똑똑한 패키지를 추가한다:

~~~bash
$ mrt add bootstrap
~~~

<%= commit "2-2", "Added bootstrap package." %>

<% note do %>

### 패키지에 대하여

미티어에서 패키지에 대하여 언급할 때는, 구체적으로 한다. Meteor에서는 다섯가지 형식의 패키지를 사용한다:

- Meteor core는 여러 개의 **핵심 패키지들**로 나누어진다. 이들은 모든 미티어 앱에 포함된다. 여기는 신경쓸 것 없다.
- 미티어 **스마트 패키지**는 [약 37개의 패키지 그룹](http://docs.meteor.com/#packages)(전체 목록은 `meteor list` 명령으로 알 수 있다)으로 미티어에 번들로 포함되어 있으며, 앱에 선택적으로 포함시킬 수 있다. Meteorite를 사용하지 않고도 `meteor add packagename` 명령어를 이용하여 추가할 수 있다.
- **로컬 패키지**는 독자가 직접 만든 패키지로 `/packages` 디렉토리에 넣는다. 이를 사용할 때 Meteorite는 필요없다.
- **Atmosphere 스마트 패키지**는 [Atmosphere](http://atmosphere.meteor.com)에 등록된 서드파티 패키지이다. 이를 임포트하여 사용하려면 Meteorite를 필요로 한다.
- **NPM 패키지**(Node Packaged Modules)는 Node.js 패키지이다. 이들은 미티어에서 단독으로 작동하지는 않지만, 위의 네 가지 형식의 패키지 내부에서 *사용될 수 있다*.

<% end %>

### 미티어 앱의 파일구조

코딩을 시작하기에 앞서, 프로젝트를 적절하게 구성해야 한다. 깔끔한 빌드를 위해 `microscope` 디렉토리에서 `microscope.html`, `microscope.js`, 그리고 `microscope.css`를 삭제하라.

다음, `/microscope` 디렉토리의 하위에 5개의 서브 디렉토리를 생성하라: `/client`, `/server`, `/public`, `/lib`, `/collections`. 그리고 빈 파일 `main.html`과 `main.js`파일을 `/client` 디렉토리에 만든다. 지금 앱이 동작하지 않는 것은 걱정할 것 없다. 다음 장에서 이 파일들의 내부를 채울 것이다.

이 디렉토리 중의 몇 개는 특별하다는 것을 지적해두자. 파일에 대하여 이야기하자면, 미티어에는 다음과 같은 규칙이 있다:

- `/server` 디렉토리에 있는 코드는 서버에서만 실행된다.
- `/client` 디렉토리에 있는 코드는 클라이언트에서만 실행된다
- 그 밖의 모든 것은 양쪽 모두에서 실행된다.
- `/lib`에 있는 파일들은 가장 먼저 로드된다.
- 모든 `main.*` 파일은 가장 나중에 로드된다.
- 정적 자원들(fonts, images, 등)은 `/public` 디렉토리에 넣는다.

미티어에 위와 같은 규칙이 있지만, 원하지 않으면 위 앱의 파일구조를 반드시 사용하라고 강제하지 않는다. 위의 구조는 우리가 채택한 구조일 뿐, 공식적으로 채택된 규정은 아니다.

이에 대하여 더 상세한 정보를 원하면 [공식 Meteor 문서](http://docs.meteor.com/#structuringyourapp)를 살펴보기를 권한다.

<% note do %>

### Meteor는 MVC인가?

Ruby on Rails 같은 프레임워크에서 미티어로 옮겨왔다면, 미티어 앱이 MVC (Model View Controller) 패턴을 채택하는 지 궁금해 할 것이다.

답변은 "아니오"이다. Rails와는 달리, 미티어는 앱에 미리 정의된 구조를 강제하지 않는다. 그러므로 이 책에서는 우리에게 가장 의미있는 방식으로 코드를 배치할 것이며, MVC에 대하여는 크게 걱정하지 않을 것이다.

<% end %>

### Public은 없다?

그렇다. 우리는 거짓말을 했다. Microscope 앱은 정적자원을 사용하지 않으므로 `public/` 디렉토리가 필요없다! 그러나, 대부분의 다른 앱들은 최소한 몇 개의 이미지는 포함할 것이므로, 이것을 다루는 것은 중요하다고 생각했다.

그런데, 숨은 `.meteor` 디렉토리도 주목할 필요가 있다. 이것은 Meteor가 자체 코드를 저장하는 곳이다. 그리고 여기에 있는 코드를 수정하는 것은 보통은 매우 나쁜 생각이다. 이에 대한 유일한 예외는 `.meteor/packages`와 `.meteor/release` 파일들인데, 이들은 각각 스마트 패키지와 사용할 미티어 버전을 기술하는데 사용된다.

<% note do %>

### 언더스코어 대 카멜표기

오래된 언더스코어(`my_variable`) 대 카멜케이스(`myVariable`)의 논쟁에서 우리가 할 수 있는 유일한 말은 독자가 어떤 것을 선택하든 계속 고수한다면 별 상관이 없다는 것이다.

이 책에서, 우리는 카멜케이스 방식을 사용하는 데, 이유는 보편적으로 JavaScript가 사용하는 방식(따지고 보면, JavaScript이지 java_script가 아니다!)이기 때문이다.

이 규칙에 유일한 예외는 파일명인데, 이것은 언더스코어 방식(`my_file.js`)을 사용하며, CSS 클래스 파일은 하이픈 방식(`.my-class`)을 사용한다. 이 이유는 파일시스템의 경우는, 언더스코어가 가장 일반적이기 때문이며, 반면에 CSS 문법 자체는 이미 하이픈(`font-family`, `text-align`, 등)을 사용하기 때문이다.

<% end %>

### CSS 다루기

이 책은 CSS에 관한 것이 아니다. 그러므로, 스타일링을 상세하게 다루어 진도가 느려지지 않도록, 처음부터 전체 스타일시트를 제공하기로 결정했다. 그러니 이것에 대하여 다시 걱정할 일은 없다.

Meteor가 CSS를 자동으로 로드하고 최적화하므로, 다른 정적 자원들과는 다르게 `/public` 디렉토리가 아닌 `/client` 디렉토리에 넣는다. 바로 `client/stylesheets/` 디렉토리를 만들고, 이 `style.css` 파일을 넣어라:

~~~css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Re-arranged file structure." %>

<% note do %>

### CoffeeScript에 대하여

이 책은 완전히 JavaScript로 작성될 것이다. 하지만, CoffeeScript를 선호한다면, 미티어가 지원하는 기능을 이용하기 바란다. 단지 CoffeeScript 패키지를 추가하고 진행하면 된다:

`mrt add coffeescript`

<% end %>