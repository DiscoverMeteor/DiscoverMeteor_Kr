---
title: Collections
slug: collections
date: 0004/01/01
number: 4
contents: Meteor의 핵심기능인 실시간 Collection에 대해 배워보자.|어떻게 Meteor의 자료 동기화가 작동하는지 이해하자.|우리에 Template에 Collection을 통합해보자.|우리의 기본 프토타입을 실시간 어플리케이션으로 바꿔보자!
paragraphs: 72
---

////

////

////

////

////

////

////

~~~js
Posts = new Meteor.Collection('posts');
~~~
<%= caption "collections/posts.js" %>

<%= commit "4-1", "Added a posts collection" %>

////

<% note do %>

### To Var인가 Not To Var인가?

////

<% end %>

////

<% note do %>

### Console vs Console vs Console

////

#### 터미널

<%= screenshot "terminal", "The Terminal" %>

- ////
- ////
- ////
- ////

#### 브라우저 콘솔

<%= screenshot "browser-console", "The Browser Console" %>

- ////
- ////
- ////
- ////

#### Mongo 쉘

<%= screenshot "mongo-shell", "The Mongo Shell" %>

- ////
- ////
- ////
- ////

////

<% end %>

### 서버쪽 Collections

////

////

~~~bash
> db.posts.insert({title: "A new post"});

> db.posts.find();
{ "_id": ObjectId(".."), "title" : "A new post"};
~~~
<%= caption "The Mongo Shell" %>

<% note do %>

### Mongo on Meteor.com

////

////

<% end %>

////

### 클라이언트쪽 Collections

////

////

////

<% note do %>

### MiniMongo 소개

////

<% end %>

### Client-Server 통신

////

////

////

~~~bash
> db.posts.find();
{title: "A new post", _id: ObjectId("..")};
~~~
<%= caption "The Mongo Shell" %>

~~~js
❯ Posts.findOne();
{title: "A new post", _id: LocalCollection._ObjectID};
~~~
<%= caption "First browser console" %>

////

~~~js
❯ Posts.find().count();
1
❯ Posts.insert({title: "A second post"});
'xxx'
❯ Posts.find().count();
2
~~~
<%= caption "First browser console" %>

////

~~~bash
❯ db.posts.find();
{title: "A new post", _id: ObjectId("..")};
{title: "A second post", _id: 'yyy'};
~~~
<%= caption "The Mongo Shell" %>

////

////

~~~js
❯ Posts.find().count();
2
~~~
<%= caption "Second browser console" %>

////

////

////

### 실시간을 유지하기

////

////

### 데이터베이스 생성하기

////

////

////

~~~bash
$ meteor reset
~~~

////

////

~~~js
if (Posts.find().count() === 0) {
  Posts.insert({
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  });
  
  Posts.insert({
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  });
  
  Posts.insert({
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  });
}
~~~
<%= caption "server/fixtures.js" %>

<%= commit "4-2", "Added data to the posts collection." %>

////

////

### 헬퍼로 HTML과 데이터를 연결하기

////

~~~js
❯ Posts.find().fetch();
~~~
<%= caption "Browser console" %>

////

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "2~4" %>

<%= commit "4-3", "Wired collection into `postsList` template." %>

<% note do %>

### 검색과 가져오기(Find & Fetch)

////

////

<% end %>

////

<%= screenshot "4-3", "Using live data" %>

////

////

~~~js
❯ Posts.insert({
  title: 'Meteor Docs', 
  author: 'Tom Coleman', 
  url: 'http://docs.meteor.com'
});
~~~
<%= caption "Browser console" %>

////

<%= screenshot "4-4", "Adding posts via the console" %>

////

<% note do %>

### DOM의 변화를 감지하기

////

////

<% end %>

### Collections에 접속하기: Publications(출판)과 Subscriptions(가입)

////

////

~~~bash
$ meteor remove autopublish
~~~

////

////

////

~~~js
Meteor.publish('posts', function() {
  return Posts.find();
});
~~~
<%= caption "server/publications.js" %>

////

~~~js
Meteor.subscribe('posts');
~~~
<%= caption "client/main.js" %>

<%= commit "4-4", "Removed `autopublish` and set up a basic publication." %>

////

### 결론

////
