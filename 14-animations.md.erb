---
title: 애니메이션
slug: animations
date: 0014/01/01
number: 14
contents: 미티어가 두 DOM 엘리먼트를 자리바꿀 때, 내부에서 일어나는 일을 살펴본다.|Post 목록의 재정렬을 애니메이션하는 방법을 배운다.|새로운 post의 삽입을 애니메이션하는 방법을 배운다.
paragraphs: 58
---

이제 실시간 투표, 점수 계산, 순위 지정을 하는 기능이 구현되었다. 그런데, 홈페이지에서 post가 점프하여 이동하는 사용자 경험이 거슬리고, 이상하다. 이를 애니메이션으로 부드럽게 처리하려고 한다.

### 미티어와 DOM

흥미로운 분야(움직이는 세계)로 나가기에 앞서 미티어가 DOM(Document Object Model – 페이지를 구성하는 HTML 엘리먼트들의 컬렉션)과 어떻게 상호작용을 하는 지 이해할 필요가 있다.

명심해야 할 결정적인 포인트는 엘리먼트들은 *이동할 수 없다*는 것이다. 이들은 삭제되거나 생성(이것은 DOM의 한계이지 미티어의 한계가 아니다)될 수만 있다. 그러므로, A와 B가 자리를 바꾸는 모양을 만들어 내기 위해서, 미티어는 실제로는 B를 제거하고 B의 새 복제물을 A앞에 삽입하는 것이다.

이런 기교를 부리는 것은, B를 새 위치로 애니메이션하여 이동하지 못하기 때문이다. B는 미티어가 페이지를 다시 그리는 순간(이것은 반응성 덕분에 순간적으로 일어난다) 사라진다. 대신 새로 생성된 B가 원래 위치에서 A의 앞에 이동하는 것이다.

post A와 post B를 바꿔치기 위해서(상대적으로 p1, p2에 위치해 있다고 하면), 다음 단계를 따라갈 것이다:

1. B를 삭제한다
2. DOM에서 A 앞에 B'를 생성한다
3. B'를 p2로 이동한다
4. A를 p1으로 이동한다
5. A를 p2로 애니메이션 처리한다
6. B'를 p1으로 애니메이션 처리한다

아래 다이어그램은 위의 단계를 상세하게 설명해준다:

<%= diagram "animation_diagram", "Swtiching two posts", "pull-center" %>

////

////

////

### Proper Timing

////

////

////

////

////

////

### CSS Positioning

////

////

////

////

////

~~~css
.post{
  position:relative;
  transition:all 300ms 0ms ease-in;
}
~~~
<%= caption "client/stylesheets/style.css" %>

////

////

<% note do %>

### Position:absolute

////

////

<% end %>

### Total Recall

////

////

> //// 

////

////

### Ranking Posts

////

////

////

////

~~~js
Template.postsList.helpers({
  postsWithRank: function() {
    this.posts.rewind();
    return this.posts.map(function(post, index, cursor) {
      post._rank = index;
      return post;
    });
  }
});
~~~
<%= caption "/client/views/posts/posts_list.js" %>
<%= highlight "2~8" %>

////

////

~~~html
<template name="postsList">
  <div class="posts">
    {{#each postsWithRank}}
      {{> postItem}}
    {{/each}}
    
    {{#if nextPath}}
      <a class="load-more" href="{{nextPath}}">Load more</a>
    {{/if}}
  </div>
</template>
~~~
<%= caption "/client/views/posts/posts_list.html" %>

<%= highlight "3" %>

<% note do %>

### Be Kind, Rewind

////

////

////

<% end %>

### Putting it together

////

~~~js
Template.postItem.helpers({
  //...
});

Template.postItem.rendered = function(){
  // animate post from previous position to new position
  var instance = this;
  var rank = instance.data._rank;
  var $this = $(this.firstNode);
  var postHeight = 80;
  var newPosition = rank * postHeight;
 
  // if element has a currentPosition (i.e. it's not the first ever render)
  if (typeof(instance.currentPosition) !== 'undefined') {
    var previousPosition = instance.currentPosition;
    // calculate difference between old position and new position and send element there
    var delta = previousPosition - newPosition;
    $this.css("top", delta + "px");
  }
  
  // let it draw in the old position, then..
  Meteor.defer(function() {
    instance.currentPosition = newPosition;
    // bring element back to its new original position
    $this.css("top",  "0px");
  }); 
};

Template.postItem.events({
  //...
});
~~~
<%= caption "/client/views/posts/post_item.js" %>
<%= highlight "5~27" %>

<%= commit "14-1", "Added post reordering animation." %>

////

////

////

### Animating New Posts

////

////

1. ////
2. ////

////

////

~~~js
Template.postItem.helpers({
  //...
});

Template.postItem.rendered = function(){
  // animate post from previous position to new position
  var instance = this;
  var rank = instance.data._rank;
  var $this = $(this.firstNode);
  var postHeight = 80;
  var newPosition = rank * postHeight;
  
  // if element has a currentPosition (i.e. it's not the first ever render)
  if (typeof(instance.currentPosition) !== 'undefined') {
    var previousPosition = instance.currentPosition;
    // calculate difference between old position and new position and send element there
    var delta = previousPosition - newPosition;
    $this.css("top", delta + "px");
  } else {
    // it's the first ever render, so hide element
    $this.addClass("invisible");
  }
  
  // let it draw in the old position, then..
  Meteor.defer(function() {
    instance.currentPosition = newPosition;
    // bring element back to its new original position
    $this.css("top",  "0px").removeClass("invisible");
  }); 
};

Template.postItem.events({
  //...
});
~~~
<%= caption "/client/views/posts/post_item.js" %>
<%= highlight "19~22,28" %>

<%= commit "14-2", "Fade items in when they are drawn." %>

////

<% note do %>

### CSS & JavaScript

////

////

<% end %>

////
