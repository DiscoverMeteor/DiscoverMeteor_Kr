---
title: 오류
slug: errors
date: 0009/01/01
number: 9
contents: 오류와 메시지를 보여주는 더 나은 구조를 만든다.|사용자가 오류를 보았는 지를 알기 위한 `Template.rendered` 사용법을 배운다.|오류가 한 번만 보여지게 라우터 필터를 사용한다.
paragraphs: 31
---

사용자의 폼 입력 처리과정에서 문제가 발생했을 때 사용자에게 경고하기 위해 그저 브라우저의 표준 `alert()` 대화상자를 사용하는 것은 좀 불만이다. 이것은 확실히 좋은 UX는 아니다. 우리는 더 잘 할 수 있다.

대신, 사용자에게 그 흐름을 깨지 않으면서 진행 내용을 알려주는 보다 발전된 형태를 구현하는 융통성있는 오류 보고 체계를 구현해보자.

### 로컬 컬렉션 소개

우리는 사용자가 어떤 오류를 열람했는지 추적하고, 사이트의 "눈에 띄는" 영역에 새 오류를 보여주는, 간단한 시스템을 구현하려고 한다. 이 UX 패턴은 사용자의 작업 흐름을 방해하지 않고 발생한 내용을 사용자에게 알리는 경우에 유용하다.

우리가 만들려고 하는 것은 Ruby on Rails 애플리케이션에서 종종 발견되는 플래시 메시지와 유사하지만, 이것이 클라이언트 쪽에서 구현되고, 사용자가 메시지를 보았는 지를 안다는 점에서 좀 더 정교하다.

시작하기에 앞서 오류를 저장할 컬렉션을 만든다. 오류는 현재 세션에서만 적용되고 어쨋든 저장할 필요가 없으므로, 새로운 형태로 구현하는데, 그것은 로컬 컬렉션을 만드는 것이다. 이 의미는 `Errors` 컬렉션은 브라우저에만 존재하며, 서버와 동기화하지 않을 것이라는 점이다.

이를 완성하기 위해, 우리는 클라이언트에만 존재하는 파일에 컬렉션 이름을 `null`로 지정하여 오류를 생성한다. 우리는 이 새 로컬 컬렉션에 단순히 오류를 삽입하는 `throwError` 함수를 만든다:

~~~js
// Local (client-only) collection
Errors = new Meteor.Collection(null);
~~~
<%= caption "client/helpers/errors.js" %>

컬렉션이 만들어졌으니, 우리는 여기에 오류를 추가할 때 호출하는 `throwError` 함수를 추가할 수 있다. 이것은 로컬 컬렉션이고 Mongo 데이터베이스에 저장되지 않을 것이므로 `allow`나 `deny`, 또는 그 비슷한 것에 대하여 걱정할 필요없다.

~~~js
throwError = function(message) {
  Errors.insert({message: message})
}
~~~
<%= caption "client/helpers/errors.js" %>

오류를 저장하는 데에 로컬 컬렉션을 이용하는 장점은 모든 컬렉션처럼 이것이 반응형이라는 것이다 -- 이 의미는 다른 컬렉션 데이터를 보여주는 것과 마찬가지로 오류를 보여주는 것을 선언적 방법으로 구현할 수 있다는 것이다.

### 오류 보여주기

우리는 메인 레이아웃의 상단에 오류를 보여주려고 한다:

~~~html
<template name="layout">
  <div class="container">
    {{> header}}
    {{> errors}}
    <div id="main" class="row-fluid">
      {{yield}}
    </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>
<%= highlight "7" %>

이제 `errors.html`에 `errors`와 `error` 템플릿을 만든다:

~~~html
<template name="errors">
  <div class="errors row-fluid">
    {{#each errors}}
      {{> error}}
    {{/each}}
  </div>
</template>

<template name="error">
  <div class="alert alert-error">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
~~~
<%= caption "client/views/includes/errors.html" %>

<% note do %>

### 두 개의 템플릿

하나의 파일에 두 개의 템플릿이 들어있다. 지금까지 우리는 "파일 하나에, 템플릿 하나"를 고수하여 왔다. 그런데 미티어에서는 하나의 파일에 모든 템플릿을 다 넣어도 잘 작동한다(비록 이렇게 하면 `main.html`이 무척 혼란스럽긴 하겠지만 말이다!).

이 때, 두 템플릿 모두 짧기 때문에 예외적으로 그들을 한 파일에 다 넣어서 관리가 용이하게 한다.

<% end %>

이제 템플릿 헬퍼를 만들고 계속 진행한다!

~~~js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});
~~~
<%= caption "client/views/includes/errors.js" %>

<%= commit "9-1", "Basic error reporting." %>

### 오류 만들기

이제 오류를 화면에 보여주는 방법은 알게 되었다, 그러나 여전히 뭔가 더 만들어야 할 것들이 있다. 오류는 대부분 사용자가 새로운 콘텐츠를 입력하는 과정에 발생한다. 그래서 post 등록 콜백에서 발생하는 오류를 체크하고 그렇게 발생하는 오류 메시지를 보여주도록 한다.

더불어, `302` 번 오류가 발생(이는 동일한 URL을 가진 post가 이미 존재함을 가리킨다)하는 경우, 우리는 그 존재하는 post로 리다이렉트할 것이다. 기존 post의 `_id` 값을 `error.details`로부터(7장에서 `Error` 클래스의 매개변수를 전달할 때, 세 번째 매개변수 `details`에 post의 `_id`를 전달했던 것을 상기하라) 얻는다.

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error) {
        // display the error to the user
        throwError(error.reason);
        
        if (error.error === 302)
          Router.go('postPage', {_id: error.details})
      } else {
        Router.go('postPage', {_id: id});
      }
    });
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>
<%= highlight "12~14, 16~21" %>

<%= commit "9-2", "Actually use the error reporting." %>

시도해보자: URL `http://meteor.com`를 입력하여 post를 등록해보자. 이 URL이 이미 존재하는 post에 등록되었기 때문에, 다음과 같은 화면을 볼 것이다:

<%= screenshot "9-1", "Triggering an error" %>

### 오류 지우기

이제 오류창의 닫기 버튼을 눌렀을 지도 모르겠다. 만약 그렇게 했다면, 오류창이 사라지지만, 다른 페이지를 로드하면 오류창이 다시 나타나는 것을 보았을 것이다. 무슨 일이 일어나고 있는 것일까?

그 닫기 버튼은 Twitter Bootstrap의 Javascript를 구동하는 버튼이다: 이는 미티어와는 상관이 없다! 그러므로 이것은 그저 Bootstrap이 DOM에서 오류 `<div>`를 제거한 것일 뿐이지 미티어 컬렉션에서 제거한 것이 아니다. 그래서 미티어가 페이지를 재로드할 때, 그 오류창이 다시 나타나는 것이다.

따라서 오류가 사라졌다가 다시 나타나 사용자에게 지난 실수의 기억을 되살리고 천천히 미쳐가기를 바라지 않는다면, 컬렉션에서 오류를 삭제하는 기능을 추가하는 것이 좋을 것이다.

우선, 우리는 `throwError` 함수를 수정하여 `seen` 속성을 추가한다. 이것은 나중에 사용자가 실제로 오류 메시지를 보았는 지를 추적하는데 유용하다.

이 작업이 마무리되면, "열람한" 오류 메시지를 지우는 간단한 `clearErrors` 함수를 작성한다:

~~~js
// Local (client-only) collection
Errors = new Meteor.Collection(null);

throwError = function(message) {
  Errors.insert({message: message, seen: false})
}

clearErrors = function() {
  Errors.remove({seen: true});
}
~~~
<%= caption "client/helpers/errors.js" %>
<%= highlight "5,8~10" %>

다음, 라우터에서 오류를 지워 다른 페이지로 이동하면 이 오류들이 영구 삭제되도록 한다:

~~~js
// ...

Router.before(requireLogin, {only: 'postSubmit'})
Router.before(function() { clearErrors() });
~~~
<%= caption "lib/router.js" %>
<%= highlight "4" %>

`clearErrors()` 함수가 작업을 수행하려면, 오류에 `seen` 상태 표시가 이루어져야 한다. 이를 적절하게 처리하기 위해서, 극단적인 예를 검토해보자: 오류가 발생하고, 사용자는 다른 곳(중복된 링크를 post에 등록하려고 시도할 때 처럼)으로 리다이렉트될 때, 그 리다이렉션은 순간적으로 일어난다. 이는 그 사용자가 그 오류 메시지를 지워지기전에 볼 기회가 없다는 의미가 된다.

이것이 `seen` 속성이 자리할 곳을 알려준다. 확실한 것은 사용자가 실제로 오류를 보았을 때, 값을 `true`로 설정해야 한다는 것이다.

이를 구현하기 위해서 `Meteor.defer()`를 사용한다. 이 함수는 미티어가 무언가 수행된 "직후에" 콜백을 수행하도록 한다. 이것은 `defer()`가 브라우저에게 실행하기 전에 1/1000 초를 기다리라고 말하는 것과 비슷하다.

우리가 하려는 것은 미티어가 `errors` 템플릿이 렌더링된 후 1/1000 초가 지나서 `seen`을 `true`로 설정하도록 하는 것이다. 하지만, 리다이렉션이 순간적으로 일어난다고 말했던 것을 기억하는가? 이것은 리다이렉션이 `defer` 콜백 이전에 일어나고, 이는 이 콜백이 실행될 기회가 없음을 의미한다.

이것이 바로 우리가 원하는 것이다: 이게 실행되지 않으면 오류는 `seen` 상태 설정이 이루어지지 않고, 이는 오류가 지워지지 않는다는 것을 의미하고, 다시 이것은 사용자가 리다이렉트되는 페이지에도 오류 메시지가 다시 나타난다는 것이다!

~~~js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});

Template.error.rendered = function() {
  var error = this.data;
  Meteor.defer(function() {
    Errors.update(error._id, {$set: {seen: true}});
  });
};
~~~
<%= caption "client/views/includes/errors.js" %>
<%= highlight "7~12" %>

<%= commit "9-3", "Monitor which errors have been seen, and clear on routing." %>

`rendered` 콜백은 브라우저에서 템플릿이 렌더링되었을 때 한 번 구동된다. 콜백 내부에서 `this`는 현 템플릿 인스턴스를 가리키며, `this.data`로 현재 렌더링이 일어나는 객체(여기서는 오류 객체)의 데이터에 접근할 수 있다.

휴! 여기까지가 사용자들이 결코 보지 않기를 바라는 그 무언가에 대한 많은 작업이었다!

<% note do %>

### `rendered` 콜백

템플릿의 `rendered` 콜백은 템플릿이 브라우저에서 렌더링이 될 때마다 구동된다. 물론 이것은 화면에 나타나는 첫 순간을 포함한다. 그러나 기억해야 할 것은 이 콜백은 템플릿이 다시 렌더링되는 모든 순간에도 구동된다는 것이다. 즉, 그 데이터가 변경되는 모든 순간에 구동된다는 의미이다.

Rendered 콜백은 전형적으로 최소 두 번 구동된다: 첫째 앱이 처음 로드될 때, 둘째는 컬렉션 데이터가 로드되었을 때이다. 그러므로 여기에 두 번 구동(경고창, 이벤트 추적 분석 코드 등 같은)되어선 안되는 코드를 넣을 때 주의해야 한다.

<% end %>